// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Secop.Core.Domain.Enums;
using Secop.Customer.Persistence.DbContexts;

#nullable disable

namespace Secop.Customer.Persistence.Migrations
{
    [DbContext(typeof(CustomerDbContext))]
    [Migration("20240926105930_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("customer")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "customer", "customer_type", new[] { "individual", "commercial" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "customer", "entity_status_type", new[] { "active", "passive", "deleted" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Secop.Core.Domain.Entities.CustomerEntities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address_line1")
                        .HasColumnOrder(1);

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address_line2")
                        .HasColumnOrder(2);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city")
                        .HasColumnOrder(3);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<EntityStatusType>("EntityStatus")
                        .HasColumnType("customer.entity_status_type");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("postal_code")
                        .HasColumnOrder(5);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("state")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("address", "customer");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f93a20a-5e7e-41a6-a8e5-8c5efc73b3b4"),
                            AddressLine1 = "123 Ana Cadde",
                            AddressLine2 = "Daire 4B",
                            City = "Bir Yer",
                            Country = "T�rkiye",
                            CreatedAt = new DateTime(2024, 8, 24, 10, 5, 0, 0, DateTimeKind.Utc),
                            CreatedById = new Guid("f7b72d1c-36a5-489c-9989-d8fa9b0d8ea4"),
                            EntityStatus = EntityStatusType.Active,
                            MemberId = new Guid("c12eaf70-8c4a-4b1d-8b63-3f4eacfd28ef"),
                            PostalCode = "90210",
                            State = "CA"
                        });
                });

            modelBuilder.Entity("Secop.Core.Domain.Entities.CustomerEntities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("contact_type")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<EntityStatusType>("EntityStatus")
                        .HasColumnType("customer.entity_status_type");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_number")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("contact", "customer");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc4f7557-f2ef-4d52-8b53-ef2d690b254e"),
                            ContactType = "Mobil",
                            CreatedAt = new DateTime(2024, 8, 24, 10, 10, 0, 0, DateTimeKind.Utc),
                            CreatedById = new Guid("f7b72d1c-36a5-489c-9989-d8fa9b0d8ea4"),
                            EntityStatus = EntityStatusType.Active,
                            MemberId = new Guid("c12eaf70-8c4a-4b1d-8b63-3f4eacfd28ef"),
                            PhoneNumber = "+90-555-1234"
                        });
                });

            modelBuilder.Entity("Secop.Core.Domain.Entities.CustomerEntities.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<CustomerType>("CustomerType")
                        .HasColumnType("customer.customer_type")
                        .HasColumnName("customer_type")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth")
                        .HasColumnOrder(5);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email")
                        .HasColumnOrder(3);

                    b.Property<EntityStatusType>("EntityStatus")
                        .HasColumnType("customer.entity_status_type");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name")
                        .HasColumnOrder(1);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("member", "customer");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c12eaf70-8c4a-4b1d-8b63-3f4eacfd28ef"),
                            CreatedAt = new DateTime(2024, 8, 24, 10, 0, 0, 0, DateTimeKind.Utc),
                            CreatedById = new Guid("f7b72d1c-36a5-489c-9989-d8fa9b0d8ea4"),
                            CustomerType = CustomerType.Individual,
                            DateOfBirth = new DateTime(1985, 6, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ahmet.yilmaz@example.com",
                            EntityStatus = EntityStatusType.Active,
                            FirstName = "Ahmet",
                            LastName = "Yılmaz"
                        });
                });

            modelBuilder.Entity("Secop.Core.Domain.Entities.CustomerEntities.Address", b =>
                {
                    b.HasOne("Secop.Core.Domain.Entities.CustomerEntities.Member", "Member")
                        .WithMany("Addresses")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Secop.Core.Domain.Entities.CustomerEntities.Contact", b =>
                {
                    b.HasOne("Secop.Core.Domain.Entities.CustomerEntities.Member", "Member")
                        .WithMany("Contacts")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Secop.Core.Domain.Entities.CustomerEntities.Member", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
