// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Secop.Core.Domain.Enums;
using Secop.Credit.Persistence.DbContexts;

#nullable disable

namespace Secop.Credit.Persistence.Migrations
{
    [DbContext(typeof(CreditDbContext))]
    partial class CreditDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("credit")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "credit", "application_status_type", new[] { "application_received", "approved", "rejected" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "credit", "credit_risk_level_type", new[] { "none", "very_high_risk", "high_risk", "medium_risk", "good", "excellent" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "credit", "credit_type", new[] { "personal", "mortgage", "auto", "deposit" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "credit", "entity_status_type", new[] { "active", "passive", "deleted" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Secop.Core.Domain.Entities.CreditEntities.Condition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasColumnOrder(3)
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id")
                        .HasColumnOrder(2);

                    b.Property<CreditType>("CreditType")
                        .HasMaxLength(50)
                        .HasColumnType("credit.credit_type")
                        .HasColumnName("credit_type")
                        .HasColumnOrder(7);

                    b.Property<EntityStatusType>("EntityStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("credit.entity_status_type")
                        .HasDefaultValue(EntityStatusType.Active)
                        .HasColumnName("entity_status")
                        .HasColumnOrder(6);

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("interest_rate")
                        .HasColumnOrder(8);

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("max_amount")
                        .HasColumnOrder(10);

                    b.Property<byte>("MaxMonth")
                        .HasColumnType("smallint")
                        .HasColumnName("max_month")
                        .HasColumnOrder(12);

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("min_amount")
                        .HasColumnOrder(9);

                    b.Property<byte>("MinMonth")
                        .HasMaxLength(120)
                        .HasColumnType("smallint")
                        .HasColumnName("min_month")
                        .HasColumnOrder(11);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasColumnOrder(5);

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("condition", "credit", t =>
                        {
                            t.HasCheckConstraint("CHK_condition_max_month", "max_month >= 1 AND max_month <= 120");

                            t.HasCheckConstraint("CHK_condition_min_month", "min_month >= 1 AND min_month <= 120");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e1d5c8d-c6f8-4a4d-bc6b-d2a5ec841b76"),
                            CreatedAt = new DateTime(2024, 8, 24, 18, 45, 0, 0, DateTimeKind.Utc),
                            CreatedById = new Guid("f7b72d1c-36a5-489c-9989-d8fa9b0d8ea4"),
                            CreditType = CreditType.Personal,
                            EntityStatus = EntityStatusType.Active,
                            InterestRate = 4.5m,
                            MaxAmount = 50000.00m,
                            MaxMonth = (byte)60,
                            MinAmount = 5000.00m,
                            MinMonth = (byte)6
                        },
                        new
                        {
                            Id = new Guid("12b4556d-4c0e-42f1-a125-e1d13a2d6c2a"),
                            CreatedAt = new DateTime(2024, 8, 25, 10, 15, 0, 0, DateTimeKind.Utc),
                            CreatedById = new Guid("d9aebd1a-36a5-4d3a-998b-d8fa9b0d1234"),
                            CreditType = CreditType.Mortgage,
                            EntityStatus = EntityStatusType.Active,
                            InterestRate = 5.0m,
                            MaxAmount = 75000.00m,
                            MaxMonth = (byte)72,
                            MinAmount = 10000.00m,
                            MinMonth = (byte)12
                        });
                });

            modelBuilder.Entity("Secop.Core.Domain.Entities.CreditEntities.CreditApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("ApplicationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("application_date")
                        .HasColumnOrder(11)
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<ApplicationStatusType>("ApplicationStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("credit.application_status_type")
                        .HasDefaultValue(ApplicationStatusType.ApplicationReceived)
                        .HasColumnName("application_status")
                        .HasColumnOrder(13);

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("comment")
                        .HasColumnOrder(14);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasColumnOrder(3)
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id")
                        .HasColumnOrder(2);

                    b.Property<CreditType>("CreditType")
                        .HasColumnType("credit.credit_type")
                        .HasColumnName("credit_type")
                        .HasColumnOrder(10);

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id")
                        .HasColumnOrder(7);

                    b.Property<EntityStatusType>("EntityStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("credit.entity_status_type")
                        .HasDefaultValue(EntityStatusType.Active)
                        .HasColumnName("entity_status")
                        .HasColumnOrder(6);

                    b.Property<CreditRiskLevelType>("RiskLevelType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("credit.credit_risk_level_type")
                        .HasDefaultValue(CreditRiskLevelType.None)
                        .HasColumnName("risk_level_type")
                        .HasColumnOrder(12);

                    b.Property<int>("TermMonths")
                        .HasColumnType("integer")
                        .HasColumnName("term_months")
                        .HasColumnOrder(9);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasColumnOrder(5);

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("credit_application", "credit");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6e7d8c9-d2c7-4f0e-a3fc-76fa0d579123"),
                            Amount = 20000.00m,
                            ApplicationDate = new DateTime(2024, 8, 24, 18, 30, 0, 0, DateTimeKind.Utc),
                            ApplicationStatus = ApplicationStatusType.ApplicationReceived,
                            CreatedAt = new DateTime(2024, 8, 24, 19, 0, 0, 0, DateTimeKind.Utc),
                            CreatedById = new Guid("a1b72d1a-4c5a-439c-b88d-d8fa9b0d9ea4"),
                            CreditType = CreditType.Personal,
                            CustomerId = new Guid("c12eaf70-8c4a-4b1d-8b63-3f4eacfd28ef"),
                            EntityStatus = EntityStatusType.Active,
                            RiskLevelType = CreditRiskLevelType.None,
                            TermMonths = 24
                        },
                        new
                        {
                            Id = new Guid("12b4556d-8c2d-42f1-a125-e1d13a3d7c4b"),
                            Amount = 35000.00m,
                            ApplicationDate = new DateTime(2024, 8, 25, 8, 45, 0, 0, DateTimeKind.Utc),
                            ApplicationStatus = ApplicationStatusType.ApplicationReceived,
                            CreatedAt = new DateTime(2024, 8, 25, 9, 0, 0, 0, DateTimeKind.Utc),
                            CreatedById = new Guid("b2b3d1b2-56c1-439c-b88d-d9f9b2c4c123"),
                            CreditType = CreditType.Mortgage,
                            CustomerId = new Guid("c12eaf70-8c4a-4b1d-8b63-3f4eacfd28ef"),
                            EntityStatus = EntityStatusType.Active,
                            RiskLevelType = CreditRiskLevelType.None,
                            TermMonths = 36
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
